// Copyright 2021 The Rode Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package intoto.attestation.v1alpha1;

option go_package = "github.com/rode/proto/intoto/attestation/v1alpha1";

import "intoto/attestation/v1alpha1/types.proto";
import "google/protobuf/struct.proto";

// A Statement ties together a subject, a predicate, and an attestation.
// See the in-toto attestation specification for more information: https://github.com/in-toto/attestation/tree/main/spec#statement
message Statement {
  // A Subject is any software artifact.
  message Subject {
    // Name is a stable identifier for the artifact. An underscore can be used if the name isn't meaningful.
    string name = 1;
    // Digest is a set of hashes for the artifact.
    intoto.attestation.v1alpha1.DigestSet digest = 2;
  }
  // XType indicates the Statement schema version.
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  intoto.attestation.v1alpha1.TypeURI _type = 1;
  // Subject is a list of software artifacts and their digests.
  repeated Subject subject = 2;
  // PredicateType is a URI that indicates the schema for the Predicate.
  intoto.attestation.v1alpha1.TypeURI predicate_type = 3;
  // A Predicate contains arbitrary information about the subject, with a schema described by the PredicateType.
  google.protobuf.Struct predicate = 4;
}

// Envelope wraps a base64-encoded Statement and one or more signatures.
message Envelope {
  // Signature is a DSSE-formatted (https://github.com/secure-systems-lab/dsse) signature
  message Signature {
    // Sig is the base64-encoded signature
    string sig = 1;
  }

  // PayloadType describes the payload encoding. It should be set to application/vnd.in-toto+json.
  string payload_type = 1;
  // Payload is the base64-encoded Statement.
  string payload = 2;
  // Signatures should include at least one signature of the payload.
  repeated Signature signatures = 3;
}
